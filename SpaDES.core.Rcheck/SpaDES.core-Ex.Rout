
R Under development (unstable) (2018-02-08 r74238) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "SpaDES.core"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('SpaDES.core')
Loading required package: quickPlot
Loading required package: reproducible
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("POM")
> ### * POM
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: POM
> ### Title: Use Pattern Oriented Modeling to fit unknown parameters
> ### Aliases: POM POM,simList,character-method
> 
> ### ** Examples
> 
> if (interactive()) {
+   set.seed(89462)
+   library(parallel)
+   library(raster)
+   mySim <- simInit(
+     times = list(start = 0.0, end = 2.0, timeunit = "year"),
+     params = list(
+       .globals = list(stackName = "landscape", burnStats = "nPixelsBurned"),
+       fireSpread = list(nFires = 5),
+       randomLandscapes = list(nx = 300, ny = 300)
+     ),
+     modules = list("randomLandscapes", "fireSpread", "caribouMovement"),
+     paths = list(modulePath = system.file("sampleModules", package = "SpaDES.core"))
+   )
+ 
+   # Since this is a made up example, we don't have real data
+   #  to run POM against. Instead, we will run the model once,
+   #  take the values at the end of the simulation as if they
+   #  are real data, then rerun the POM function next,
+   #  comparing these "data" with the simulated values
+   #  using Mean Absolute Deviation
+   outData <- spades(reproducible::Copy(mySim), .plotInitialTime = NA)
+ 
+   # Extract the "true" data, in this case, the "proportion of cells burned"
+   # Function defined that will use landscape$Fires map from simList,
+   #  i.e., sim$landscape$Fires
+   #  the return value being compared via MAD with propCellBurnedData
+   propCellBurnedFn <- function(landscape) {
+     sum(getValues(landscape$Fires) > 0) / ncell(landscape$Fires)
+   }
+   # visualize the burned maps of true "data"
+   propCellBurnedData <- propCellBurnedFn(outData$landscape)
+   clearPlot()
+   if (interactive()) {
+     Fires <- outData$landscape$Fires # Plot doesn't do well with many nested layers
+     Plot(Fires)
+   }
+ 
+   # Example 1 - 1 parameter
+   # In words, this says, "find the best value of spreadprob such that
+   #  the proportion of the area burned in the simulation
+   #  is as close as possible to the proportion area burned in
+   #  the "data", using \code{DEoptim()}.
+ 
+   # Can use cluster if computer is multi-threaded (but not yet via cl arg, which is not
+   #                                                implemented yet in DEoptim)
+   # This example uses parallelType = 1 in DEoptim. For this, you must manually
+   #  pass all packages and variables as character strings.
+   # cl <- makeCluster(detectCores() - 1) # not implemented yet in DEoptim
+   out1 <- POM(mySim, "spreadprob",
+               list(propCellBurnedData = propCellBurnedFn), # data = pattern pair
+               #optimControl = list(parallelType = 1),
+               logObjFnVals = TRUE)
+ 
+   ## Once cl arg is available from DEoptim, this will work:
+   # out1 <- POM(mySim, "spreadprob", cl = cl,
+   #            list(propCellBurnedData = propCellBurnedFn)) # data = pattern pair
+ 
+   # Example 2 - 2 parameters
+   # Function defined that will use caribou from sim$caribou, with
+   #  the return value being compared via MAD with NPattern
+   #  module, parameter N, is from 10 to 1000)
+   caribouFn <- function(caribou) length(caribou)
+ 
+   # Extract "data" from simList object (normally, this would be actual data)
+   NPattern <- caribouFn(outData$caribou)
+ 
+   aTime <- Sys.time()
+   parsToVary <- c("spreadprob", "N")
+   out2 <- POM(mySim, parsToVary,
+               list(propCellBurnedData = propCellBurnedFn,
+                    NPattern = caribouFn), logObjFnVals = TRUE)
+                    #optimControl = list(parallelType = 1))
+                    #cl = cl) # not yet implemented, waiting for DEoptim
+   bTime <- Sys.time()
+   # check that population overlaps known values (0.225 and 100)
+   apply(out2$member$pop, 2, quantile, c(0.025, 0.975))
+   hists <- apply(out2$member$pop, 2, hist, plot = FALSE)
+   clearPlot()
+   for (i in seq_along(hists)) Plot(hists[[i]], addTo = parsToVary[i],
+                                    title = parsToVary[i], axes = TRUE)
+ 
+   print(paste("DEoptim", format(bTime - aTime)))
+   #stopCluster(cl) # not yet implemented, waiting for DEoptim
+ 
+   # Example 3 - using objFn instead of objects
+ 
+   # list all the parameters in the simList, from these, we select to vary
+   params(mySim)
+ 
+   # Objective Function Example:
+   #   objective function must have several elements
+   #   - first argument must be parameter vector, passed to and used by DEoptim
+   #   - likely needs to take sim object, likely needs a copy
+   #      because of pass-by-reference semantics of sim objects
+   #   - pass data that will be used internally for objective function
+   objFnEx <- function(pars, # param values
+                       sim, # simList object
+                       NPattern, propCellBurnedData, caribouFn, propCellBurnedFn) {
+     ### data
+ 
+     # make a copy of simList because it will possibly be altered by spades call
+     sim1 <- reproducible::Copy(sim)
+ 
+     # take the parameters and assign them to simList
+     params(sim1)$fireSpread$spreadprob <- pars[1]
+     params(sim1)$caribouMovement$N <- pars[2]
+ 
+     # run spades, without plotting
+     out <- spades(sim1, .plotInitialTime = NA)
+ 
+     # calculate outputs
+     propCellBurnedOut <- propCellBurnedFn(out$landscape)
+     NPattern_Out <- caribouFn(out$caribou)
+ 
+     minimizeFn <- abs(NPattern_Out - NPattern) +
+                   abs(propCellBurnedOut - propCellBurnedData)
+ 
+     # have more info reported to console, if desired
+     # cat(minimizeFn)
+     # cat(" ")
+     # cat(pars)
+     # cat("\n")
+ 
+     return(minimizeFn)
+   }
+ 
+   # Run DEoptim with custom objFn, identifying 2 parameters to allow
+   #  to vary, and pass all necessary objects required for the
+   #  objFn
+ 
+   # choose 2 of them to vary. Need to identify them in params & inside objFn
+   # Change optimization parameters to alter how convergence is achieved
+   out5 <- POM(mySim, params = c("spreadprob", "N"),
+               objFn = objFnEx,
+               NPattern = NPattern,
+               propCellBurnedData = propCellBurnedData,
+               caribouFn = caribouFn,
+               propCellBurnedFn = propCellBurnedFn,
+               #cl = cl, # uncomment for cluster # not yet implemented, waiting for DEoptim
+               # see ?DEoptim.control for explanation of these options
+               optimControl = list(
+                 NP = 100, # run 100 populations, allowing quantiles to be calculated
+                 initialpop = matrix(c(runif(100, 0.2, 0.24), runif(100, 80, 120)), ncol = 2),
+                 parallelType = 1
+               )
+             )
+ 
+   # Can also use an optimizer directly -- miss automatic parameter bounds,
+   #  and automatic objective function using option 2
+   library(DEoptim)
+   out7 <- DEoptim(fn = objFnEx,
+                  sim = mySim,
+                  NPattern = NPattern,
+                  propCellBurnedData = propCellBurnedData,
+                  caribouFn = caribouFn,
+                  propCellBurnedFn = propCellBurnedFn,
+                  # cl = cl, # uncomment for cluster
+                  # see ?DEoptim.control for explanation of these options
+                  control = DEoptim.control(
+                    steptol = 3,
+                    parallelType = 1, # parallelType = 3,
+                    packages = list("raster", "SpaDES.core", "RColorBrewer"),
+                    parVar = list("objFnEx"),
+                    initialpop = matrix(c(runif(40, 0.2, 0.24),
+                                          runif(40, 80, 120)), ncol = 2)),
+                  lower = c(0.2, 80), upper = c(0.24, 120))
+ }
> 
> 
> 
> cleanEx()
> nameEx("append_attr")
> ### * append_attr
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: append_attr
> ### Title: Add a module to a 'moduleList'
> ### Aliases: append_attr append_attr,list,list-method
> 
> ### ** Examples
> 
> library(igraph) # igraph exports magrittr's pipe operator

Attaching package: ‘igraph’

The following object is masked from ‘package:reproducible’:

    %>%

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

> tmp1 <- list("apple", "banana") %>% lapply(., `attributes<-`, list(type = "fruit"))
> tmp2 <- list("carrot") %>% lapply(., `attributes<-`, list(type = "vegetable"))
> append_attr(tmp1, tmp2)
[[1]]
[1] "apple"
attr(,"type")
[1] "fruit"

[[2]]
[1] "banana"
attr(,"type")
[1] "fruit"

[[3]]
[1] "carrot"
attr(,"type")
[1] "vegetable"

> rm(tmp1, tmp2)
> 
> 
> 
> cleanEx()

detaching ‘package:igraph’

> nameEx("checksums")
> ### * checksums
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: checksums
> ### Title: Calculate checksums for a module's data files
> ### Aliases: checksums checksums,character,character,logical-method
> ###   checksums,character,character,missing-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D moduleName <- "my_module"
> ##D modulePath <- file.path("path", "to", "modules")
> ##D 
> ##D ## verify checksums of all data files
> ##D checksums(moduleName, modulePath)
> ##D 
> ##D ## write new CHECKSUMS.txt file
> ##D 
> ##D # 1. verify that all data files are present (and no extra files are present)
> ##D list.files(file.path(modulePath, moduleName, "data"))
> ##D 
> ##D # 2. calculate file checksums and write to file (this will overwrite CHECKSUMS.txt)
> ##D checksums(moduleName, modulePath, write = TRUE)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("classFilter")
> ### * classFilter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: classFilter
> ### Title: Filter objects by class
> ### Aliases: classFilter
> ###   classFilter,character,character,character,environment-method
> ###   classFilter,character,character,character,missing-method
> ###   classFilter,character,character,missing,environment-method
> ###   classFilter,character,character,missing,missing-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   ## from global environment
> ##D   a <- list(1:10)     # class `list`
> ##D   b <- letters        # class `character`
> ##D   d <- stats::runif(10)      # class `numeric`
> ##D   f <- sample(1L:10L) # class `numeric`, `integer`
> ##D   g <- lm( jitter(d) ~ d ) # class `lm`
> ##D   h <- glm( jitter(d) ~ d ) # class `lm`, `glm`
> ##D   classFilter(ls(), include=c("character", "list"))
> ##D   classFilter(ls(), include = "numeric")
> ##D   classFilter(ls(), include = "numeric", exclude = "integer")
> ##D   classFilter(ls(), include = "lm")
> ##D   classFilter(ls(), include = "lm", exclude = "glm")
> ##D   rm(a, b, d, f, g, h)
> ## End(Not run)
> 
> ## from local (e.g., function) environment
> local({
+   e <- environment()
+   a <- list(1:10)     # class `list`
+   b <- letters        # class `character`
+   d <- stats::runif(10)      # class `numeric`
+   f <- sample(1L:10L) # class `numeric`, `integer`
+   g <- lm( jitter(d) ~ d ) # class `lm`
+   h <- glm( jitter(d) ~ d ) # class `lm`, `glm`
+   classFilter(ls(), include=c("character", "list"), envir = e)
+   classFilter(ls(), include = "numeric", envir = e)
+   classFilter(ls(), include = "numeric", exclude = "integer", envir = e)
+   classFilter(ls(), include = "lm", envir = e)
+   classFilter(ls(), include = "lm", exclude = "glm", envir = e)
+   rm(a, b, d, e, f, g, h)
+ })
> 
> ## from another environment
> e = new.env(parent = emptyenv())
> e$a <- list(1:10)     # class `list`
> e$b <- letters        # class `character`
> e$d <- stats::runif(10)      # class `numeric`
> e$f <- sample(1L:10L) # class `numeric`, `integer`
> e$g <- lm( jitter(e$d) ~ e$d ) # class `lm`
> e$h <- glm( jitter(e$d) ~ e$d ) # class `lm`, `glm`
> classFilter(ls(e), include=c("character", "list"), envir = e)
[1] "a" "b"
> classFilter(ls(e), include = "numeric", envir = e)
[1] "d" "f"
> classFilter(ls(e), include = "numeric", exclude = "integer", envir = e)
[1] "d"
> classFilter(ls(e), include = "lm", envir = e)
[1] "g" "h"
> classFilter(ls(e), include = "lm", exclude = "glm", envir = e)
[1] "g"
> rm(a, b, d, f, g, h, envir = e)
> rm(e)
> 
> 
> 
> 
> cleanEx()
> nameEx("copyModule")
> ### * copyModule
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: copyModule
> ### Title: Create a copy of an existing module
> ### Aliases: copyModule copyModule,character,character,character-method
> ###   copyModule,character,character,missing-method
> 
> ### ** Examples
> 
> ## Not run: copyModule(from, to)
> 
> 
> 
> 
> cleanEx()
> nameEx("createsOutput")
> ### * createsOutput
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: createsOutput
> ### Title: Define an output object of a module
> ### Aliases: createsOutput createsOutput,ANY,ANY,ANY-method
> ###   createsOutput,character,character,character-method
> 
> ### ** Examples
> 
> outputObjects <- dplyr::bind_rows(
+   createsOutput(objectName = "outputObject1", objectClass = "character",
+                 desc = "this is for example"),
+   createsOutput(objectName = "outputObject2", objectClass = "numeric",
+                 desc = "this is for example",
+                 otherInformation = "I am the second output object")
+ )
> 
> 
> 
> 
> cleanEx()
> nameEx("defineModule")
> ### * defineModule
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: defineModule
> ### Title: Define a new module.
> ### Aliases: defineModule defineModule,.simList,list-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   ## a default version of the defineModule is created with a call to newModule
> ##D   newModule("test", path = tempdir())
> ##D 
> ##D   ## view the resulting module file
> ##D   if (interactive()) file.edit(file.path(tempdir(), "test", "test.R"))
> ##D 
> ##D   # The default defineModule created by newModule is currently (SpaDES version 1.3.1.9044):
> ##D   defineModule(sim, list(
> ##D     name = "test",
> ##D     description = "insert module description here",
> ##D     keywords = c("insert key words here"),
> ##D     authors = c(person(c("First", "Middle"), "Last",
> ##D                        email = "email@example.com", role = c("aut", "cre"))),
> ##D     childModules = character(0),
> ##D     version = list(SpaDES = "1.3.1.9044", test = "0.0.1"),
> ##D     spatialExtent = raster::extent(rep(NA_real_, 4)),
> ##D     timeframe = as.POSIXlt(c(NA, NA)),
> ##D     timeunit = NA_character_, # e.g., "year",
> ##D     citation = list("citation.bib"),
> ##D     documentation = list("README.txt", "test.Rmd"),
> ##D     reqdPkgs = list(),
> ##D     parameters = rbind(
> ##D       #defineParameter("paramName", "paramClass", value, min, max,
> ##D       # "parameter description")),
> ##D       defineParameter(".plotInitialTime", "numeric", NA, NA, NA,
> ##D       "This describes the simulation time at which the first plot event should occur"),
> ##D       defineParameter(".plotInterval", "numeric", NA, NA, NA,
> ##D       "This describes the simulation time at which the first plot event should occur"),
> ##D       defineParameter(".saveInitialTime", "numeric", NA, NA, NA,
> ##D       "This describes the simulation time at which the first save event should occur"),
> ##D       defineParameter(".saveInterval", "numeric", NA, NA, NA,
> ##D       "This describes the simulation time at which the first save event should occur")
> ##D     ),
> ##D     inputObjects = bind_rows(
> ##D       expectsInput(objectName = NA_character_, objectClass = NA_character_,
> ##D         sourceURL = NA_character_, desc = NA_character_, other = NA_character_)
> ##D     ),
> ##D     outputObjects = bind_rows(
> ##D       createsOutput(objectName = NA_character_, objectClass = NA_character_,
> ##D         desc = NA_character_, other = NA_character_)
> ##D     )
> ##D   ))
> ##D 
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("defineParameter")
> ### * defineParameter
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: defineParameter
> ### Title: Define a parameter used in a module
> ### Aliases: defineParameter
> ###   defineParameter,character,character,ANY,ANY,ANY,character-method
> ###   defineParameter,character,character,ANY,missing,missing,character-method
> ###   defineParameter,missing,missing,missing,missing,missing,missing-method
> 
> ### ** Examples
> 
> parameters = rbind(
+   defineParameter("lambda", "numeric", 1.23, desc = "intrinsic rate of increase"),
+   defineParameter("P", "numeric", 0.2, 0, 1, "probability of attack")
+ )
> 
> 
> 
> 
> cleanEx()
> nameEx("expectsInput")
> ### * expectsInput
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: expectsInput
> ### Title: Define an input object that the module expects.
> ### Aliases: expectsInput expectsInput,ANY,ANY,ANY,ANY-method
> ###   expectsInput,character,character,character,character-method
> ###   expectsInput,character,character,character,missing-method
> 
> ### ** Examples
> 
> inputObjects <- dplyr::bind_rows(
+   expectsInput(objectName = "inputObject1", objectClass = "character",
+                desc = "this is for example", sourceURL = "not available"),
+   expectsInput(objectName = "inputObject2", objectClass = "numeric",
+                desc = "this is for example", sourceURL = "not available",
+                otherInformation = "I am the second input object")
+ )
> 
> 
> 
> 
> cleanEx()
> nameEx("experiment")
> ### * experiment
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: experiment
> ### Title: Run an experiment using 'spades'
> ### Aliases: experiment experiment,simList-method
> 
> ### ** Examples
> 
> if (interactive()) {
+   library(igraph) # use %>% in a few examples
+   library(raster)
+ 
+   tmpdir <- file.path(tempdir(), "examples")
+ 
+   # Create a default simList object for use through these examples
+   mySim <- simInit(
+     times = list(start = 0.0, end = 2.0, timeunit = "year"),
+     params = list(
+       .globals = list(stackName = "landscape", burnStats = "nPixelsBurned"),
+       # Turn off interactive plotting
+       fireSpread = list(.plotInitialTime = NA),
+       caribouMovement = list(.plotInitialTime = NA),
+       randomLandscapes = list(.plotInitialTime = NA)
+     ),
+     modules = list("randomLandscapes", "fireSpread", "caribouMovement"),
+     paths = list(modulePath = system.file("sampleModules", package = "SpaDES.core"),
+                  outputPath = tmpdir),
+     # Save final state of landscape and caribou
+     outputs = data.frame(objectName = c("landscape", "caribou"), stringsAsFactors = FALSE)
+   )
+ 
+   # Example 1 - test alternative parameter values
+   # Create an experiment - here, 2 x 2 x 2 (2 levels of 2 params in fireSpread,
+   #    and 2 levels of 1 param in caribouMovement)
+ 
+   # Here is a list of alternative values for each parameter. They are length one
+   #   numerics here -- e.g., list(0.2, 0.23) for spreadprob in fireSpread module,
+   #   but they can be anything, as long as it is a list.
+   experimentParams <- list(fireSpread = list(spreadprob = list(0.2, 0.23),
+                                              nFires = list(20, 10)),
+                            caribouMovement = list(N = list(100, 1000)))
+ 
+   sims <- experiment(mySim, params = experimentParams)
+ 
+   # see experiment:
+   attr(sims, "experiment")
+ 
+   # Read in outputs from sims object
+   FireMaps <- do.call(stack, lapply(1:NROW(attr(sims, "experiment")$expDesign),
+                                     function(x) sims[[x]]$landscape$Fires))
+   if (interactive()) Plot(FireMaps, new = TRUE)
+ 
+   # Or reload objects from files, useful if sim objects too large to store in RAM
+   caribouMaps <- lapply(sims, function(sim) {
+     caribou <- readRDS(outputs(sim)$file[outputs(sim)$objectName == "caribou"])
+   })
+   names(caribouMaps) <- paste0("caribou", 1:8)
+   # Plot whole named list
+   if (interactive()) Plot(caribouMaps, size = 0.1)
+ 
+   # Example 2 - test alternative modules
+   # Example of changing modules, i.e., caribou with and without fires
+   # Create an experiment - here, 2 x 2 x 2 (2 levels of 2 params in fireSpread,
+   #    and 2 levels of 1 param in caribouMovement)
+   experimentModules <- list(
+     c("randomLandscapes", "fireSpread", "caribouMovement"),
+     c("randomLandscapes", "caribouMovement"))
+   sims <- experiment(mySim, modules = experimentModules)
+   attr(sims, "experiment")$expVals # shows 2 alternative experiment levels
+ 
+   # Example 3 - test alternative parameter values and modules
+   # Note, this isn't fully factorial because all parameters are not
+   #   defined inside smaller module list
+   sims <- experiment(mySim, modules = experimentModules, params = experimentParams)
+   attr(sims, "experiment")$expVals # shows 10 alternative experiment levels
+ 
+   # Example 4 - manipulate manipulate directory names -
+   #  "simNum" is special value for dirPrefix, it is converted to 1, 2, ...
+   sims <- experiment(mySim, params = experimentParams, dirPrefix = c("expt", "simNum"))
+   attr(sims, "experiment")$expVals # shows 8 alternative experiment levels, 24 unique
+                                    #   parameter values
+ 
+   # Example 5 - doing replicate runs -
+   sims <- experiment(mySim, replicates = 2)
+   attr(sims, "experiment")$expDesign # shows 2 replicates of same experiment
+ 
+   # Example 6 - doing replicate runs, but within a sub-directory
+   sims <- experiment(mySim, replicates = 2, dirPrefix = c("expt"))
+   lapply(sims, outputPath) # shows 2 replicates of same experiment, within a sub directory
+ 
+   # Example 7 - doing replicate runs, of a complex, non factorial experiment.
+   # Here we do replication, parameter variation, and module variation all together.
+   # This creates 20 combinations.
+   # The experiment function tries to make fully factorial, but won't
+   # if all the levels don't make sense. Here, changing parameter values
+   # in the fireSpread module won't affect the simulation when the fireSpread
+   # module is not loaded:
+ 
+   # library(raster)
+   # beginCluster(20) # if you have multiple clusters available, use them here to save time
+   sims <- experiment(mySim, replicates = 2, params = experimentParams,
+                      modules = experimentModules,
+                      dirPrefix = c("expt", "simNum"))
+   # endCluster() # end the clusters
+   attr(sims, "experiment")
+ 
+   # Example 8 - Use replication to build a probability map.
+   # For this to be meaningful, we need to provide a fixed input landscape,
+   #   not a randomLandscape for each experiment level. So requires 2 steps.
+   # Step 1 - run randomLandscapes module twice to get 2 randomly
+   #  generated landscape maps. We will use 1 right away, and we will
+   #  use the two further below
+   mySimRL <- simInit(
+     times = list(start = 0.0, end = 0.1, timeunit = "year"),
+     params = list(
+       .globals = list(stackName = "landscape"),
+       # Turn off interactive plotting
+       randomLandscapes = list(.plotInitialTime = NA)
+     ),
+     modules = list("randomLandscapes"),
+     paths = list(modulePath = system.file("sampleModules", package = "SpaDES.core"),
+                  outputPath = file.path(tmpdir, "landscapeMaps1")),
+     outputs = data.frame(objectName = "landscape", saveTime = 0, stringsAsFactors = FALSE)
+   )
+   # Run it twice to get two copies of the randomly generated landscape
+   mySimRLOut <- experiment(mySimRL, replicate = 2)
+ 
+   # extract one of the random landscapes, which will be passed into next as an object
+   landscape <- mySimRLOut[[1]]$landscape
+ 
+   # here we don't run the randomLandscapes module; instead we pass in a landscape
+   #  as an object, i.e., a fixed input
+   mySimNoRL <- simInit(
+     times = list(start = 0.0, end = 1, timeunit = "year"), # only 1 year to save time
+     params = list(
+       .globals = list(stackName = "landscape", burnStats = "nPixelsBurned"),
+       # Turn off interactive plotting
+       fireSpread = list(.plotInitialTime = NA),
+       caribouMovement = list(.plotInitialTime = NA)
+     ),
+     modules = list("fireSpread", "caribouMovement"), # No randomLandscapes modules
+     paths = list(modulePath = system.file("sampleModules", package = "SpaDES.core"),
+                  outputPath = tmpdir),
+     objects = c("landscape"), # Pass in the object here
+     # Save final state (the default if saveTime is not specified) of landscape and caribou
+     outputs = data.frame(objectName = c("landscape", "caribou"), stringsAsFactors = FALSE)
+   )
+ 
+   # Put outputs into a specific folder to keep them easy to find
+   outputPath(mySimNoRL) <- file.path(tmpdir, "example8")
+   sims <- experiment(mySimNoRL, replicates = 8) # Run experiment
+   attr(sims, "experiment") # shows the experiment, which in this case is just replicates
+ 
+   # list all files that were saved called 'landscape'
+   landscapeFiles <- dir(outputPath(mySimNoRL), recursive = TRUE, pattern = "landscape",
+                         full.names = TRUE)
+ 
+   # Can read in Fires layers from disk since they were saved, or from the sims
+   #  object
+   # Fires <- lapply(sims, function(x) x$landscape$Fires) %>% stack
+   Fires <- lapply(landscapeFiles, function(x) readRDS(x)$Fires) %>% stack()
+   Fires[Fires > 0] <- 1 # convert to 1s and 0s
+   fireProb <- sum(Fires) / nlayers(Fires) # sum them and convert to probability
+   if (interactive()) Plot(fireProb, new = TRUE)
+ 
+   # Example 9 - Pass in inputs, i.e., input data objects taken from disk
+   #  Here, we, again, don't provide randomLandscapes module, so we need to
+   #  provide an input stack called lanscape. We point to the 2 that we have
+   #  saved to disk in Example 8
+   mySimInputs <- simInit(
+     times = list(start = 0.0, end = 2.0, timeunit = "year"),
+     params = list(
+       .globals = list(stackName = "landscape", burnStats = "nPixelsBurned"),
+       # Turn off interactive plotting
+       fireSpread = list(.plotInitialTime = NA),
+       caribouMovement = list(.plotInitialTime = NA)
+     ),
+     modules = list("fireSpread", "caribouMovement"),
+     paths = list(modulePath = system.file("sampleModules", package = "SpaDES.core"),
+                  outputPath = tmpdir),
+     # Save final state of landscape and caribou
+     outputs = data.frame(objectName = c("landscape", "caribou"), stringsAsFactors = FALSE)
+   )
+   landscapeFiles <- dir(tmpdir, pattern = "landscape_year0", recursive = TRUE, full.names = TRUE)
+ 
+   # Varying inputs files - This could be combined with params, modules, replicates also
+   outputPath(mySimInputs) <- file.path(tmpdir, "example9")
+   sims <- experiment(mySimInputs,
+                      inputs = lapply(landscapeFiles, function(filenames) {
+                        data.frame(file = filenames, loadTime = 0,
+                                   objectName = "landscape",
+                                   stringsAsFactors = FALSE)
+                      })
+    )
+ 
+   # load in experimental design object
+   experiment <- load(file = file.path(tmpdir, "example9", "experiment.RData")) %>% get()
+   print(experiment) # shows input files and details
+ 
+   # Example 10 - Use a very simple output dir name using substrLength = 0,
+   #   i.e., just the simNum is used for outputPath of each spades call
+   outputPath(mySim) <- file.path(tmpdir, "example10")
+   sims <- experiment(mySim, modules = experimentModules, replicates = 2,
+                      substrLength = 0)
+   lapply(sims, outputPath) # shows that the path is just the simNum
+   experiment <- load(file = file.path(tmpdir, "example10", "experiment.RData")) %>% get()
+   print(experiment) # shows input files and details
+ 
+   # Example 11 - use clearSimEnv = TRUE to remove objects from simList
+   # This will shrink size of return object, which may be useful because the
+   #  return from experiment function may be a large object (it is a list of
+   # simLists). To see size of a simList, you have to look at the objects
+   #  contained in the  envir(simList).  These can be obtained via objs(sim)
+   sapply(sims, function(x) object.size(objs(x))) %>% sum + object.size(sims)
+   # around 3 MB
+   # rerun with clearSimEnv = TRUE
+   sims <- experiment(mySim, modules = experimentModules, replicates = 2,
+                      substrLength = 0, clearSimEnv = TRUE)
+   sapply(sims, function(x) object.size(objs(x))) %>% sum + object.size(sims)
+   # around 250 kB, i.e., all the simList contents except the objects.
+ 
+   # Example 12 - pass in objects
+   experimentObj <- list(landscape = lapply(landscapeFiles, readRDS) %>%
+                                     setNames(paste0("landscape", 1:2)))
+   # Pass in this list of landscape objects
+   sims <- experiment(mySimNoRL, objects = experimentObj)
+ 
+   # Remove all temp files
+   unlink(tmpdir, recursive = TRUE)
+ }
> 
> 
> 
> cleanEx()
> nameEx("loadFiles")
> ### * loadFiles
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: .fileExtensions
> ### Title: File extensions map
> ### Aliases: .fileExtensions loadFiles loadFiles,simList,missing-method
> ###   loadFiles,missing,ANY-method loadFiles,missing,missing-method
> ###   .saveFileExtensions saveSimList
> 
> ### ** Examples
> 
> ## Not run: 
> ##D 
> ##D # Load random maps included with package
> ##D filelist <- data.frame(
> ##D     files = dir(system.file("maps", package = "quickPlot"),
> ##D             full.names = TRUE, pattern = "tif"),
> ##D     functions = "rasterToMemory", package = "quickPlot"
> ##D )
> ##D sim1 <- loadFiles(filelist = filelist)
> ##D clearPlot()
> ##D if (interactive()) Plot(sim1$DEM)
> ##D 
> ##D # Second, more sophisticated. All maps loaded at time = 0, and the last one is reloaded
> ##D #  at time = 10 and 20 (via "intervals").
> ##D # Also, pass the single argument as a list to all functions...
> ##D #  specifically, when add "native = TRUE" as an argument to the raster function
> ##D files = dir(system.file("maps", package = "quickPlot"),
> ##D             full.names = TRUE, pattern = "tif")
> ##D arguments = I(rep(list(native = TRUE), length(files)))
> ##D filelist = data.frame(
> ##D    files = files,
> ##D    functions = "raster::raster",
> ##D    objectName = NA,
> ##D    arguments = arguments,
> ##D    loadTime = 0,
> ##D    intervals = c(rep(NA, length(files)-1), 10)
> ##D )
> ##D 
> ##D sim2 <- loadFiles(filelist = filelist)
> ##D 
> ##D # if we extend the end time and continue running, it will load an object scheduled
> ##D #  at time = 10, and it will also schedule a new object loading at 20 because
> ##D #  interval = 10
> ##D end(sim2) <- 20
> ##D sim2 <- spades(sim2) # loads the percentPine map 2 more times, once at 10, once at 20
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("loadPackages")
> ### * loadPackages
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: loadPackages
> ### Title: Load packages.
> ### Aliases: loadPackages loadPackages,character-method
> ###   loadPackages,list-method loadPackages,NULL-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D   pkgs <- list("raster", "lme4")
> ##D   loadPackages(pkgs) # loads packages if installed
> ##D   loadPackages(pkgs, install = TRUE) # loads packages after installation (if needed)
> ## End(Not run)
> 
> 
> 
> 
> cleanEx()
> nameEx("moduleCoverage")
> ### * moduleCoverage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: moduleCoverage
> ### Title: Calculate module coverage of unit tests
> ### Aliases: moduleCoverage moduleCoverage,character,character-method
> ###   moduleCoverage,character,missing-method
> 
> ### ** Examples
> 
> ## Not run: 
> ##D  library(igraph) # for %>%
> ##D  library(SpaDES.core)
> ##D  tmpdir <- file.path(tempdir(), "coverage")
> ##D  modulePath <- file.path(tmpdir, "Modules") %>% checkPath(create = TRUE)
> ##D  moduleName <- "forestAge" # sample module to test
> ##D  downloadModule(name = moduleName, path = modulePath) # download sample module
> ##D  testResults <- moduleCoverage(name = moduleName, path = modulePath)
> ##D  shine(testResults$moduleCoverage)
> ##D  shine(testResults$functionCoverage)
> ##D  unlink(tmpdir, recursive = TRUE)
> ## End(Not run)
> 
> 
> 
> cleanEx()
> nameEx("moduleMetadata")
> ### * moduleMetadata
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: moduleMetadata
> ### Title: Parse and extract module metadata
> ### Aliases: moduleMetadata
> ###   moduleMetadata,character,character,missing-method
> ###   moduleMetadata,character,missing,missing-method
> ###   moduleMetadata,ANY,missing,simList-method
> 
> ### ** Examples
> 
> path <- system.file("sampleModules", package = "SpaDES.core")
> sampleModules <- dir(path)
> x <- moduleMetadata(sampleModules[3], path)
> 
> # using simList
> mySim <- simInit(
+    times = list(start = 2000.0, end = 2002.0, timeunit = "year"),
+    params = list(
+      .globals = list(stackName = "landscape")
+    ),
+    modules = list("caribouMovement"),
+    paths = list(modulePath = system.file("sampleModules", package = "SpaDES.core"))
+ )
Warning in gzfile(file, mode) :
  cannot open compressed file '/var/scratchro/tomas/QA/R-74238/lib/.snapshot.RDS', probable reason 'Read-only file system'
Error in gzfile(file, mode) : cannot open the connection
Calls: simInit ... Require -> installedVersionsQuick -> saveRDS -> gzfile
Execution halted
