
R Under development (unstable) (2018-02-08 r74238) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "EnrichmentBrowser"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('EnrichmentBrowser')
Loading required package: SummarizedExperiment
Loading required package: GenomicRanges
Loading required package: stats4
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colMeans, colSums, colnames,
    dirname, do.call, duplicated, eval, evalq, get, grep, grepl,
    intersect, is.unsorted, lapply, lengths, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, rank, rbind,
    rowMeans, rowSums, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: Biobase
Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Loading required package: DelayedArray
Loading required package: matrixStats

Attaching package: ‘matrixStats’

The following objects are masked from ‘package:Biobase’:

    anyMissing, rowMedians

Loading required package: BiocParallel

Attaching package: ‘DelayedArray’

The following objects are masked from ‘package:matrixStats’:

    colMaxs, colMins, colRanges, rowMaxs, rowMins, rowRanges

The following objects are masked from ‘package:base’:

    aperm, apply

Loading required package: graph
Loading required package: pathview
Loading required package: org.Hs.eg.db
Loading required package: AnnotationDbi

##############################################################################
Pathview is an open source software package distributed under GNU General
Public License version 3 (GPLv3). Details of GPLv3 is available at
http://www.gnu.org/licenses/gpl-3.0.html. Particullary, users are required to
formally cite the original Pathview paper (not just mention it) in publications
or products. For details, do citation("pathview") within R.

The pathview downloads and uses KEGG data. Non-academic uses may require a KEGG
license agreement (details at http://www.kegg.jp/kegg/legal.html).
##############################################################################



Attaching package: 'EnrichmentBrowser'

The following object is masked from 'package:BiocGenerics':

    normalize

> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("comb.ea.results")
> ### * comb.ea.results
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: comb.ea.results
> ### Title: Combining enrichment analysis results
> ### Aliases: comb.ea.results
> 
> ### ** Examples
> 
> 
>     # (1) expression data: 
>     # simulated expression values of 100 genes
>     # in two sample groups of 6 samples each
>     eset <- make.example.data(what="eset")
>     eset <- de.ana(eset)
> 
>     # (2) gene sets:
>     # draw 10 gene sets with 15-25 genes
>     gs <- make.example.data(what="gs", gnames=names(eset))
> 
>     # (3) make artificial enrichment analysis results:
>     # 2 ea methods with 5 significantly enriched gene sets each 
>     ora.res <- make.example.data(what="ea.res", method="ora", eset=eset, gs=gs) 
>     gsea.res <- make.example.data(what="ea.res", method="gsea", eset=eset, gs=gs)
>     
>     # (4) combining the results
>     res.list <- list(ora.res, gsea.res)
>     comb.res <- comb.ea.results(res.list)
> 
>     # (5) result visualization and exploration
>     gs.ranking(comb.res)
DataFrame with 10 rows and 6 columns
      GENE.SET  ORA.RANK GSEA.RANK MEAN.RANK  ORA.PVAL GSEA.PVAL
   <character> <numeric> <numeric> <numeric> <numeric> <numeric>
1          gs5        10        40        25     0.004     0.020
2          gs2        40        30        35     0.038     0.014
3          gs1        50        20        35     0.049     0.012
4          gs9        80        10        45     0.372     0.010
5          gs8        30        80        55     0.024     0.790
6          gs3        20       100        60     0.022     0.966
7          gs7        60        70        65     0.233     0.684
8          gs6        90        60        75     0.421     0.440
9         gs10       100        50        75     0.690     0.043
10         gs4        70        90        80     0.319     0.869
> 
>     # user-defined ranking and combination functions
>     # (a) dummy ranking, give 1:nrow(res.tbl)
>     dummy.rank <- function(res.tbl) seq_len(nrow(res.tbl))
> 
>     # (b) weighted average for combining ranks
>     wavg <- function(r) mean(c(1,2) * r)
> 
>     comb.res <- comb.ea.results(res.list, rank.fun=dummy.rank, comb.fun=wavg)
> 
> 
> 
> cleanEx()
> nameEx("compile.grn.from.kegg")
> ### * compile.grn.from.kegg
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: compile.grn.from.kegg
> ### Title: Compilation of a gene regulatory network from KEGG pathways
> ### Aliases: compile.grn.from.kegg
> 
> ### ** Examples
> 
>     # (1) download human pathways
>     #   pwys <- download.kegg.pathways("hsa")
>     # (2) compile gene regulatory network
>     #   grn <- compile.grn.from.kegg(pwys)
>     
>     pwys <- system.file("extdata/hsa_kegg_pwys.zip", package="EnrichmentBrowser")
>     hsa.grn <- compile.grn.from.kegg(pwys)
Error in unzip(pwy.zip, exdir = pwy.dir, junkpaths = TRUE) : 
  cannot open file '/var/scratchro/tomas/QA/R-74238/lib/EnrichmentBrowser/extdata/hsa00040.xml': Read-only file system
Calls: compile.grn.from.kegg -> unique -> .getKEGGRels -> .extractPwys -> unzip
Execution halted
