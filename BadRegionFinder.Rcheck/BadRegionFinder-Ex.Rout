
R Under development (unstable) (2018-02-08 r74238) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "BadRegionFinder"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('BadRegionFinder')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("BadRegionFinder-package")
> ### * BadRegionFinder-package
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: BadRegionFinder-package
> ### Title: BadRegionFinder: an R/Bioconductor package for identifying
> ###   regions with bad coverage
> ### Aliases: BadRegionFinder-package BadRegionFinder 'Coverage Classifier'
> ###   'Bad Coverage'
> ### Keywords: package
> 
> ### ** Examples
> 
> library("BSgenome.Hsapiens.UCSC.hg19")
Loading required package: BSgenome
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colMeans, colSums, colnames,
    dirname, do.call, duplicated, eval, evalq, get, grep, grepl,
    intersect, is.unsorted, lapply, lengths, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, rank, rbind,
    rowMeans, rowSums, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: Biostrings
Loading required package: XVector

Attaching package: ‘Biostrings’

The following object is masked from ‘package:base’:

    strsplit

Loading required package: rtracklayer
> 
> 
> 
> cleanEx()

detaching ‘package:BSgenome.Hsapiens.UCSC.hg19’, ‘package:BSgenome’,
  ‘package:rtracklayer’, ‘package:Biostrings’, ‘package:XVector’,
  ‘package:GenomicRanges’, ‘package:GenomeInfoDb’, ‘package:IRanges’,
  ‘package:S4Vectors’, ‘package:stats4’, ‘package:BiocGenerics’,
  ‘package:parallel’

> nameEx("determineCoverage")
> ### * determineCoverage
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: determineCoverage
> ### Title: Determines the coverage (recommended for whole-genome analyses)
> ### Aliases: determineCoverage
> 
> ### ** Examples
> 
> sample_file <- system.file("extdata", "SampleNames.txt", 
+                            package = "BadRegionFinder")
> samples <- read.table(sample_file)
> bam_input <- system.file("extdata", package = "BadRegionFinder")
> output <- system.file("extdata", package = "BadRegionFinder")
> target_regions <- system.file("extdata", "targetRegions.bed",
+                               package = "BadRegionFinder")
> targetRegions <- read.table(target_regions, header = FALSE,
+                             stringsAsFactors = FALSE)
>                             
> 
> 
> 
> cleanEx()
> nameEx("determineCoverageQuality")
> ### * determineCoverageQuality
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: determineCoverageQuality
> ### Title: Classifies the determined coverage
> ### Aliases: determineCoverageQuality 'determine Coverage Quality'
> 
> ### ** Examples
> 
> threshold1 <- 20
> threshold2 <- 100
> percentage1 <- 0.80
> percentage2 <- 0.90
> sample_file <- system.file("extdata", "SampleNames.txt", 
+                            package = "BadRegionFinder")
> samples <- read.table(sample_file)
> bam_input <- system.file("extdata", package = "BadRegionFinder")
> output <- system.file("extdata", package = "BadRegionFinder")
> target_regions <- system.file("extdata", "targetRegions.bed",
+                               package = "BadRegionFinder")
> targetRegions <- read.table(target_regions, header = FALSE,
+                             stringsAsFactors = FALSE)
> 
> 
> 
> 
> cleanEx()
> nameEx("determineQuantiles")
> ### * determineQuantiles
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: determineQuantiles
> ### Title: Determines basewise user-defined quantiles
> ### Aliases: determineQuantiles 'determine Quantiles'
> 
> ### ** Examples
> 
> library("BSgenome.Hsapiens.UCSC.hg19")
Loading required package: BSgenome
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colMeans, colSums, colnames,
    dirname, do.call, duplicated, eval, evalq, get, grep, grepl,
    intersect, is.unsorted, lapply, lengths, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, rank, rbind,
    rowMeans, rowSums, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: Biostrings
Loading required package: XVector

Attaching package: ‘Biostrings’

The following object is masked from ‘package:base’:

    strsplit

Loading required package: rtracklayer
> 
> 
> 
> cleanEx()

detaching ‘package:BSgenome.Hsapiens.UCSC.hg19’, ‘package:BSgenome’,
  ‘package:rtracklayer’, ‘package:Biostrings’, ‘package:XVector’,
  ‘package:GenomicRanges’, ‘package:GenomeInfoDb’, ‘package:IRanges’,
  ‘package:S4Vectors’, ‘package:stats4’, ‘package:BiocGenerics’,
  ‘package:parallel’

> nameEx("determineRegionsOfInterest")
> ### * determineRegionsOfInterest
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: determineRegionsOfInterest
> ### Title: Determines the regions of interest
> ### Aliases: determineRegionsOfInterest 'determine Regions Of Interest'
> 
> ### ** Examples
> 
> threshold1 <- 20
> threshold2 <- 100
> percentage1 <- 0.80
> percentage2 <- 0.90
> sample_file <- system.file("extdata", "SampleNames.txt", 
+                            package = "BadRegionFinder")
> samples <- read.table(sample_file)
> bam_input <- system.file("extdata", package = "BadRegionFinder")
> output <- system.file("extdata", package = "BadRegionFinder")
> target_regions <- system.file("extdata", "targetRegions.bed",
+                               package = "BadRegionFinder")
> targetRegions <- read.table(target_regions, header = FALSE,
+                             stringsAsFactors = FALSE)
> 
> 
> 
> 
> cleanEx()
> nameEx("plotDetailed")
> ### * plotDetailed
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: plotDetailed
> ### Title: Plots a more detailed overview of the coverage quality
> ### Aliases: plotDetailed 'plot Detailed'
> 
> ### ** Examples
> 
> library("BSgenome.Hsapiens.UCSC.hg19")
Loading required package: BSgenome
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    Filter, Find, Map, Position, Reduce, anyDuplicated, append,
    as.data.frame, basename, cbind, colMeans, colSums, colnames,
    dirname, do.call, duplicated, eval, evalq, get, grep, grepl,
    intersect, is.unsorted, lapply, lengths, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, rank, rbind,
    rowMeans, rowSums, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which, which.max, which.min

Loading required package: S4Vectors
Loading required package: stats4

Attaching package: ‘S4Vectors’

The following object is masked from ‘package:base’:

    expand.grid

Loading required package: IRanges
Loading required package: GenomeInfoDb
Loading required package: GenomicRanges
Loading required package: Biostrings
Loading required package: XVector

Attaching package: ‘Biostrings’

The following object is masked from ‘package:base’:

    strsplit

Loading required package: rtracklayer
> threshold1 <- 20
> threshold2 <- 100
> percentage1 <- 0.80
> percentage2 <- 0.90
> sample_file <- system.file("extdata", "SampleNames.txt", 
+                            package = "BadRegionFinder")
> samples <- read.table(sample_file)
> bam_input <- system.file("extdata", package = "BadRegionFinder")
> output <- system.file("extdata", package = "BadRegionFinder")
> target_regions <- system.file("extdata", "targetRegions.bed",
+                               package = "BadRegionFinder")
> targetRegions <- read.table(target_regions, header = FALSE,
+                             stringsAsFactors = FALSE)
> 
> coverage_summary <- determineCoverage(samples, bam_input, targetRegions, output,
+                                       TRonly = FALSE)
Determine Coverage
Sample Test_454
Sample Test_ion
Determine target bases
Combine Information
Chromosome: 1
Warning in file(file, ifelse(append, "a", "w")) :
  cannot open file '/var/scratchro/tomas/QA/R-74238/lib/BadRegionFinder/extdata/Summary_chr1.txt': Read-only file system
Error in file(file, ifelse(append, "a", "w")) : 
  cannot open the connection
Calls: determineCoverage -> write.table -> file
Execution halted
