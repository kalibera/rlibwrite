
R Under development (unstable) (2018-02-08 r74238) -- "Unsuffered Consequences"
Copyright (C) 2018 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # From http://rwiki.sciviews.org/doku.php?id=developers:runit
> ## unit tests will not be done if RUnit is not available
> if(require("RUnit", quietly=TRUE)) {
+  
+   ## --- Setup ---
+  
+   pkg <- "lambda.r" # <-- Change to name!
+   if(Sys.getenv("RCMDCHECK") == "FALSE") {
+     ## Path to unit tests for standalone running under Makefile (not R CMD check)
+     ## PKG/tests/../inst/unitTests
+     path <- file.path(getwd(), "..", "inst", "unitTests")
+   } else {
+     ## Path to unit tests for R CMD check
+     ## PKG.Rcheck/tests/../PKG/unitTests
+     path <- system.file(package=pkg, "unitTests")
+   }
+   cat("\nRunning unit tests\n")
+   print(list(pkg=pkg, getwd=getwd(), pathToUnitTests=path))
+  
+   library(package=pkg, character.only=TRUE)
+  
+   ## If desired, load the name space to allow testing of private functions
+   ## if (is.element(pkg, loadedNamespaces()))
+   ##     attach(loadNamespace(pkg), name=paste("namespace", pkg, sep=":"), pos=3)
+   ##
+   ## or simply call PKG:::myPrivateFunction() in tests
+  
+   ## --- Testing ---
+  
+   ## Define tests
+   testSuite <- defineTestSuite(name=paste(pkg, "unit testing"),
+                                           dirs=path)
+   ## Run
+   tests <- runTestSuite(testSuite)
+  
+   ## Default report name
+   pathReport <- file.path(path, "report")
+  
+   ## Report to stdout and text files
+   cat("------------------- UNIT TEST SUMMARY ---------------------\n\n")
+   printTextProtocol(tests, showDetails=FALSE)
+   printTextProtocol(tests, showDetails=FALSE,
+                     fileName=paste(pathReport, "Summary.txt", sep=""))
+   printTextProtocol(tests, showDetails=TRUE,
+                     fileName=paste(pathReport, ".txt", sep=""))
+  
+   ## Report to HTML file
+   printHTMLProtocol(tests, fileName=paste(pathReport, ".html", sep=""))
+  
+   ## Return stop() to cause R CMD check stop in case of
+   ##  - failures i.e. FALSE to unit tests or
+   ##  - errors i.e. R errors
+   tmp <- getErrors(tests)
+   if(tmp$nFail > 0 | tmp$nErr > 0) {
+     stop(paste("\n\nunit testing failed (#test failures: ", tmp$nFail,
+                ", #R errors: ",  tmp$nErr, ")\n\n", sep=""))
+   }
+ } else {
+   warning("cannot run unit tests -- package RUnit is not available")
+ }

Running unit tests
$pkg
[1] "lambda.r"

$getwd
[1] "/ssd/tomas/QA/R-74238/check/lambda.r.Rcheck/tests"

$pathToUnitTests
[1] "/var/scratchro/tomas/QA/R-74238/lib/lambda.r/unitTests"



Executing test function test.auto_replace.no_types_1a  ...  done successfully.



Executing test function test.auto_replace.no_types_1b  ...  done successfully.



Executing test function test.auto_replace.no_types_1c  ...  done successfully.



Executing test function test.auto_replace.types_2a  ...  done successfully.



Executing test function test.auto_replace.types_2b  ...  done successfully.



Executing test function test.auto_replace.types_2c  ...  done successfully.



Executing test function test.auto_replace.types_2d  ...  done successfully.



Executing test function test.auto_replace_3  ...  done successfully.



Executing test function test.different_names  ...  done successfully.



Executing test function test.dispatching_1a  ...  done successfully.



Executing test function test.dispatching_1b  ...  done successfully.



Executing test function test.dispatching_1c  ...  done successfully.



Executing test function test.dispatching_1d  ...  done successfully.



Executing test function test.empty_function  ... NOTE: Empty body definition encountered for a() 
NOTE: Empty body definition encountered for b(a) 
Error in UseFunction(a, "a", ...) : No valid function for 'a()'
Error in UseFunction(b, "b", ...) : No valid function for 'b(1)'
 done successfully.



Executing test function test.empty_type_constructor  ... NOTE: Empty body definition encountered for A() 
NOTE: Empty body definition encountered for B(a) 
Error in UseFunction(type.fn, type.name, ...) : 
  No valid function for 'A()'
Error in UseFunction(type.fn, type.name, ...) : 
  No valid function for 'B(1)'
 done successfully.



Executing test function test.ellipsis_arguments_1  ...  done successfully.



Executing test function test.ellipsis_unnamed_arguments  ...  done successfully.



Executing test function test.ellipsis_arguments_2  ...  done successfully.



Executing test function test.example_1  ...  done successfully.



Executing test function test.factorial_1  ...  done successfully.



Executing test function test.factorial_2  ...  done successfully.



Executing test function test.type_fill_args_1  ...  done successfully.



Executing test function test.type_fill_args_2  ...  done successfully.



Executing test function test.function_args_1  ...  done successfully.



Executing test function test.function_args_2  ...  done successfully.



Executing test function test.function_args_3  ...  done successfully.



Executing test function test.function_args_4  ...  done successfully.



Executing test function test.function_type_1  ...  done successfully.



Executing test function test.heaviside_1  ...  done successfully.



Executing test function test.heaviside_2  ...  done successfully.



Executing test function test.infix.1  ...  done successfully.



Executing test function test.infix.2  ...  done successfully.



Executing test function test.optional_arguments_1a  ...  done successfully.



Executing test function test.optional_arguments_1b  ...  done successfully.



Executing test function test.optional_arguments_1c  ...  done successfully.



Executing test function test.optional_arguments_function  ...  done successfully.



Executing test function test.optional_arguments_function_named  ...  done successfully.



Executing test function test.optional_arguments_no_args  ...  done successfully.



Executing test function test.optional_arguments_no_args_type_constraint  ...  done successfully.



Executing test function test.optional_arguments_reference_var  ...  done successfully.



Executing test function test.parse_transforms_1  ...  done successfully.



Executing test function test.parse_transforms_2  ...  done successfully.



Executing test function test.parse_transforms_3  ...  done successfully.



Executing test function test.pattern_empty  ...  done successfully.



Executing test function test.pattern_na  ...  done successfully.



Executing test function test.pattern_null  ...  done successfully.



Executing test function test.taylor_series_1  ...  done successfully.



Executing test function test.type_any_type_1  ...  done successfully.



Executing test function test.type_any_type_2  ...  done successfully.



Executing test function test.type_any_type_3  ...  done successfully.



Executing test function test.type_any_type_4  ...  done successfully.



Executing test function test.type_ellipsis_1  ...  done successfully.



Executing test function test.type_ellipsis_2  ...  done successfully.



Executing test function test.type_ellipsis_3  ...  done successfully.



Executing test function test.type_ellipsis_4  ...  done successfully.



Executing test function test.type_ellipsis_var_1  ...  done successfully.



Executing test function test.one_application  ...  done successfully.



Executing test function test.one_identity  ...  done successfully.



Executing test function test.two_application  ...  done successfully.



Executing test function test.two_identity  ...  done successfully.



Executing test function test.zero  ...  done successfully.



Executing test function test.inheritance_one_arg  ...  done successfully.



Executing test function test.inheritance_two_arg  ...  done successfully.



Executing test function test.inheritance_with_ellipsis_1  ...  done successfully.



Executing test function test.inheritance_with_ellipsis_2  ...  done successfully.



Executing test function test.inheritance_with_type_variable  ...  done successfully.



Executing test function test.type_integer_1  ...  done successfully.



Executing test function test.type_integer_2  ...  done successfully.



Executing test function test.type_integer_3  ...  done successfully.



Executing test function test.type_integer_4  ...  done successfully.



Executing test function test.type_integer_5  ...  done successfully.



Executing test function test.mixed_type_variable_1  ...  done successfully.



Executing test function test.type_variable_1  ...  done successfully.



Executing test function test.type_variable_4  ...  done successfully.



Executing test function test.type_variable_5  ...  done successfully.



Executing test function test.type_variable_6  ...  done successfully.



Executing test function test.types_1  ... [test.types_1] act.1 = error 
 done successfully.



Executing test function test.types_2.1  ...  done successfully.



Executing test function test.types_2.2  ...  done successfully.

------------------- UNIT TEST SUMMARY ---------------------

RUNIT TEST PROTOCOL -- Fri Feb  9 04:01:38 2018 
*********************************************** 
Number of test functions: 79 
Number of errors: 0 
Number of failures: 0 

 
1 Test Suite : 
lambda.r unit testing - 79 test functions, 0 errors, 0 failures
Error in file(file, ifelse(append, "a", "w")) : 
  cannot open the connection
Calls: printTextProtocol -> cat -> file
In addition: Warning message:
In file(file, ifelse(append, "a", "w")) :
  cannot open file '/var/scratchro/tomas/QA/R-74238/lib/lambda.r/unitTests/reportSummary.txt': Read-only file system
Execution halted
